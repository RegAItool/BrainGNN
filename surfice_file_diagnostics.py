#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SurfIce文件诊断和修复工具
Diagnostic and Repair Tool for SurfIce Files
"""

import os
import numpy as np
import nibabel as nib
from pathlib import Path
import struct
import gzip

def check_mz3_file():
    """检查和修复MZ3文件"""
    
    print("🔍 检查MZ3文件状态...")
    
    mz3_path = "./figures/surfice_templates/mni152.mz3"
    
    if not os.path.exists(mz3_path):
        print(f"❌ MZ3文件不存在: {mz3_path}")
        return False
    
    file_size = os.path.getsize(mz3_path)
    print(f"📁 MZ3文件大小: {file_size / 1024 / 1024:.2f} MB")
    
    # 检查文件头
    try:
        with open(mz3_path, 'rb') as f:
            header = f.read(16)
            print(f"📋 文件头: {header[:8]}")
            
            # MZ3文件应该以特定格式开头
            if len(header) < 8:
                print("❌ MZ3文件头太短")
                return False
                
        print("✅ MZ3文件基本结构正常")
        return True
        
    except Exception as e:
        print(f"❌ 读取MZ3文件错误: {e}")
        return False

def create_alternative_brain_formats():
    """创建多种大脑模板格式"""
    
    print("🧠 创建多种格式的大脑模板...")
    
    # 创建输出目录
    templates_dir = Path("./figures/surfice_templates")
    templates_dir.mkdir(parents=True, exist_ok=True)
    
    # 1. 创建简单的PLY格式大脑
    create_simple_ply_brain()
    
    # 2. 创建OBJ格式大脑
    create_obj_brain()
    
    # 3. 创建STL格式大脑
    create_stl_brain()
    
    # 4. 创建FreeSurfer格式
    create_freesurfer_format()
    
    print("✅ 多种格式大脑模板创建完成")

def create_simple_ply_brain():
    """创建简化的PLY格式大脑"""
    
    print("📐 创建PLY格式大脑...")
    
    # 生成大脑形状的顶点
    phi = np.linspace(0, np.pi, 30)
    theta = np.linspace(0, 2*np.pi, 60)
    
    vertices = []
    faces = []
    
    for i, p in enumerate(phi):
        for j, t in enumerate(theta):
            # 大脑椭球参数
            a, b, c = 75, 90, 65
            
            x = a * np.sin(p) * np.cos(t)
            y = b * np.sin(p) * np.sin(t)  
            z = c * np.cos(p)
            
            # 大脑形状修正
            if y > 50:  # 前额叶
                y *= 1.2
                z *= 0.85
            if abs(x) > 55 and z < 25:  # 颞叶
                z -= 25
                x *= 1.15
            if y < -70:  # 枕叶
                y *= 1.1
            
            vertices.append([x, y, z])
            
            # 创建面
            if i < len(phi)-1 and j < len(theta)-1:
                v1 = i * len(theta) + j
                v2 = i * len(theta) + (j + 1) % len(theta)
                v3 = (i + 1) * len(theta) + j
                v4 = (i + 1) * len(theta) + (j + 1) % len(theta)
                
                faces.append([3, v1, v2, v3])
                faces.append([3, v2, v4, v3])
    
    # 写入PLY文件
    ply_path = "./figures/surfice_templates/brain_fixed.ply"
    with open(ply_path, 'w') as f:
        f.write("ply\n")
        f.write("format ascii 1.0\n")
        f.write(f"element vertex {len(vertices)}\n")
        f.write("property float x\n")
        f.write("property float y\n") 
        f.write("property float z\n")
        f.write(f"element face {len(faces)}\n")
        f.write("property list uchar int vertex_indices\n")
        f.write("end_header\n")
        
        for v in vertices:
            f.write(f"{v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
            
        for face in faces:
            f.write(f"{face[0]} {face[1]} {face[2]} {face[3]}\n")
    
    print(f"✅ PLY大脑创建: {ply_path}")

def create_obj_brain():
    """创建OBJ格式大脑"""
    
    print("📐 创建OBJ格式大脑...")
    
    # 使用相同的大脑几何
    phi = np.linspace(0, np.pi, 25)
    theta = np.linspace(0, 2*np.pi, 50)
    
    obj_path = "./figures/surfice_templates/brain.obj"
    with open(obj_path, 'w') as f:
        f.write("# Brain mesh for SurfIce\n")
        f.write("# Generated by BrainGNN\n\n")
        
        # 写入顶点
        for p in phi:
            for t in theta:
                a, b, c = 75, 90, 65
                x = a * np.sin(p) * np.cos(t)
                y = b * np.sin(p) * np.sin(t)
                z = c * np.cos(p)
                
                # 形状修正
                if y > 50:
                    y *= 1.2
                    z *= 0.85
                if abs(x) > 55 and z < 25:
                    z -= 25
                    x *= 1.15
                if y < -70:
                    y *= 1.1
                
                f.write(f"v {x:.6f} {y:.6f} {z:.6f}\n")
        
        # 写入面
        for i in range(len(phi)-1):
            for j in range(len(theta)-1):
                v1 = i * len(theta) + j + 1
                v2 = i * len(theta) + (j + 1) % len(theta) + 1
                v3 = (i + 1) * len(theta) + j + 1
                v4 = (i + 1) * len(theta) + (j + 1) % len(theta) + 1
                
                f.write(f"f {v1} {v2} {v3}\n")
                f.write(f"f {v2} {v4} {v3}\n")
    
    print(f"✅ OBJ大脑创建: {obj_path}")

def create_stl_brain():
    """创建STL格式大脑"""
    
    print("📐 创建STL格式大脑...")
    
    stl_path = "./figures/surfice_templates/brain.stl"
    
    # 生成简化的大脑三角网格
    phi = np.linspace(0, np.pi, 20)
    theta = np.linspace(0, 2*np.pi, 40)
    
    triangles = []
    
    for i in range(len(phi)-1):
        for j in range(len(theta)):
            # 计算四个角点
            p1, t1 = phi[i], theta[j]
            p2, t2 = phi[i], theta[(j+1)%len(theta)]
            p3, t3 = phi[i+1], theta[j]
            p4, t4 = phi[i+1], theta[(j+1)%len(theta)]
            
            # 转换为笛卡尔坐标
            def sphere_to_cart(p, t):
                a, b, c = 75, 90, 65
                x = a * np.sin(p) * np.cos(t)
                y = b * np.sin(p) * np.sin(t)
                z = c * np.cos(p)
                
                # 大脑形状修正
                if y > 50:
                    y *= 1.2
                    z *= 0.85
                if abs(x) > 55 and z < 25:
                    z -= 25
                    x *= 1.15
                if y < -70:
                    y *= 1.1
                    
                return [x, y, z]
            
            v1 = sphere_to_cart(p1, t1)
            v2 = sphere_to_cart(p2, t2) 
            v3 = sphere_to_cart(p3, t3)
            v4 = sphere_to_cart(p4, t4)
            
            # 创建两个三角形
            triangles.append([v1, v2, v3])
            triangles.append([v2, v4, v3])
    
    # 写入STL文件
    with open(stl_path, 'w') as f:
        f.write("solid brain\n")
        
        for tri in triangles:
            # 计算法向量
            v1, v2, v3 = tri
            edge1 = np.array(v2) - np.array(v1)
            edge2 = np.array(v3) - np.array(v1)
            normal = np.cross(edge1, edge2)
            normal = normal / np.linalg.norm(normal)
            
            f.write(f"  facet normal {normal[0]:.6f} {normal[1]:.6f} {normal[2]:.6f}\n")
            f.write("    outer loop\n")
            f.write(f"      vertex {v1[0]:.6f} {v1[1]:.6f} {v1[2]:.6f}\n")
            f.write(f"      vertex {v2[0]:.6f} {v2[1]:.6f} {v2[2]:.6f}\n")
            f.write(f"      vertex {v3[0]:.6f} {v3[1]:.6f} {v3[2]:.6f}\n")
            f.write("    endloop\n")
            f.write("  endfacet\n")
        
        f.write("endsolid brain\n")
    
    print(f"✅ STL大脑创建: {stl_path}")

def create_freesurfer_format():
    """创建FreeSurfer格式文件"""
    
    print("🧠 创建FreeSurfer格式...")
    
    # 创建简单的顶点和面文件
    vertices_file = "./figures/surfice_templates/brain_vertices.txt"
    faces_file = "./figures/surfice_templates/brain_faces.txt"
    
    # 生成顶点
    phi = np.linspace(0, np.pi, 30)
    theta = np.linspace(0, 2*np.pi, 60)
    
    vertices = []
    faces = []
    
    for i, p in enumerate(phi):
        for j, t in enumerate(theta):
            a, b, c = 75, 90, 65
            x = a * np.sin(p) * np.cos(t)
            y = b * np.sin(p) * np.sin(t)
            z = c * np.cos(p)
            
            # 形状修正
            if y > 50:
                y *= 1.2
                z *= 0.85
            if abs(x) > 55 and z < 25:
                z -= 25
                x *= 1.15
            if y < -70:
                y *= 1.1
            
            vertices.append([x, y, z])
            
            # 创建面
            if i < len(phi)-1 and j < len(theta)-1:
                v1 = i * len(theta) + j
                v2 = i * len(theta) + (j + 1) % len(theta)
                v3 = (i + 1) * len(theta) + j
                v4 = (i + 1) * len(theta) + (j + 1) % len(theta)
                
                faces.append([v1, v2, v3])
                faces.append([v2, v4, v3])
    
    # 保存顶点
    with open(vertices_file, 'w') as f:
        f.write(f"{len(vertices)}\n")
        for i, v in enumerate(vertices):
            f.write(f"{i} {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
    
    # 保存面
    with open(faces_file, 'w') as f:
        f.write(f"{len(faces)}\n")
        for i, face in enumerate(faces):
            f.write(f"{i} {face[0]} {face[1]} {face[2]}\n")
    
    print(f"✅ FreeSurfer格式创建: {vertices_file}, {faces_file}")

def check_nifti_file():
    """检查NIfTI激活文件"""
    
    print("🔍 检查NIfTI激活文件...")
    
    nifti_path = "./figures/surfice_visualization/braingnn_pain_activation.nii.gz"
    
    if not os.path.exists(nifti_path):
        print(f"❌ NIfTI文件不存在: {nifti_path}")
        return False
    
    try:
        img = nib.load(nifti_path)
        data = img.get_fdata()
        
        print(f"📊 NIfTI文件信息:")
        print(f"   尺寸: {data.shape}")
        print(f"   数据类型: {data.dtype}")
        print(f"   值范围: {data.min():.3f} 到 {data.max():.3f}")
        print(f"   非零值数量: {np.count_nonzero(data)}")
        
        # 检查激活区域
        if np.count_nonzero(data) > 0:
            print("✅ NIfTI文件包含激活数据")
            return True
        else:
            print("⚠️ NIfTI文件没有激活数据") 
            return False
            
    except Exception as e:
        print(f"❌ 读取NIfTI文件错误: {e}")
        return False

def create_surfice_loading_script():
    """创建SurfIce加载脚本"""
    
    print("📜 创建SurfIce加载脚本...")
    
    # 创建批处理脚本
    script_content = """#!/bin/bash
# SurfIce加载脚本
# SurfIce Loading Script

echo "🧠 开始加载BrainGNN疼痛分类结果..."

# 设置文件路径
BASE_DIR="/Users/hanyu/Desktop/BrainGNN_Pytorch-main/figures"
BRAIN_TEMPLATE="$BASE_DIR/surfice_templates/brain_fixed.ply"
ACTIVATION_DATA="$BASE_DIR/surfice_visualization/braingnn_pain_activation.nii.gz"

echo "📁 检查文件..."
if [ ! -f "$BRAIN_TEMPLATE" ]; then
    echo "❌ 大脑模板不存在: $BRAIN_TEMPLATE"
    echo "🔄 尝试其他格式..."
    BRAIN_TEMPLATE="$BASE_DIR/surfice_templates/brain.obj"
fi

if [ ! -f "$ACTIVATION_DATA" ]; then
    echo "❌ 激活数据不存在: $ACTIVATION_DATA"
    exit 1
fi

echo "✅ 文件检查完成"
echo "🚀 在SurfIce中手动加载以下文件:"
echo "   1. 大脑模板: $BRAIN_TEMPLATE"
echo "   2. 激活数据: $ACTIVATION_DATA"
echo ""
echo "📖 加载步骤:"
echo "   1. 打开SurfIce"
echo "   2. File → Open → 选择大脑模板"
echo "   3. Overlay → Add → 选择激活数据"
echo "   4. 调整颜色和透明度"
echo ""
echo "🎯 期待看到98.7%准确率的疼痛分类结果!"
"""
    
    script_path = "./figures/load_surfice.sh"
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    # 设置执行权限
    os.chmod(script_path, 0o755)
    
    print(f"✅ 加载脚本创建: {script_path}")

def create_comprehensive_guide():
    """创建全面的使用指南"""
    
    print("📚 创建全面使用指南...")
    
    guide_content = """# 🧠 SurfIce MZ3文件问题解决方案

## 🚨 MZ3文件问题确认

如果mz3文件有问题，我们提供多种替代方案：

## 🔧 解决方案1: 使用PLY格式
- ✅ 文件: `brain_fixed.ply`
- 📐 格式: PLY (广泛支持)
- 🎯 在SurfIce中: File → Open → 选择 brain_fixed.ply

## 🔧 解决方案2: 使用OBJ格式  
- ✅ 文件: `brain.obj`
- 📐 格式: Wavefront OBJ (通用3D格式)
- 🎯 在SurfIce中: File → Open → 选择 brain.obj

## 🔧 解决方案3: 使用STL格式
- ✅ 文件: `brain.stl` 
- 📐 格式: STL (3D打印标准)
- 🎯 在SurfIce中: File → Open → 选择 brain.stl

## 🔧 解决方案4: 直接加载激活数据
- ✅ 跳过大脑模板
- 🎯 直接: File → Open → braingnn_pain_activation.nii.gz
- 📊 SurfIce可能自动生成基础模板

## 📁 所有文件位置:
```
figures/surfice_templates/
├── brain_fixed.ply      ← 推荐使用！
├── brain.obj           ← 备选1
├── brain.stl           ← 备选2
├── brain_vertices.txt  ← FreeSurfer格式
└── brain_faces.txt     ← FreeSurfer格式
```

## 🚀 推荐加载顺序:

### 步骤1: 选择模板
1. 优先尝试: `brain_fixed.ply`
2. 如果不行: `brain.obj`
3. 如果还不行: `brain.stl`

### 步骤2: 加载激活数据
- File → Add Overlay → braingnn_pain_activation.nii.gz

### 步骤3: 调整显示
- 颜色: Red-Blue 或 Hot-Cold
- 阈值: -0.6 到 0.6
- 透明度: 70-80%

## 🎯 期待结果:
- 🔴 疼痛激活区域 (红色)
- 🔵 疼痛抑制区域 (蓝色)  
- 📊 98.7%分类准确率

## 🆘 如果全部失败:
使用universal_brain_viewer.html - 在浏览器中直接查看！

---
🧠 BrainGNN疼痛分类 - 专业神经科学可视化
"""
    
    guide_path = "./figures/MZ3_PROBLEM_SOLUTIONS.md"
    with open(guide_path, 'w', encoding='utf-8') as f:
        f.write(guide_content)
    
    print(f"✅ 全面指南创建: {guide_path}")

def main():
    """主函数"""
    print("=" * 60)
    print("🔧 SurfIce文件诊断和修复工具")
    print("🎯 解决MZ3文件问题")
    print("=" * 60)
    
    # 1. 检查当前MZ3文件状态
    mz3_ok = check_mz3_file()
    
    # 2. 检查NIfTI文件
    nifti_ok = check_nifti_file()
    
    # 3. 无论如何都创建多种格式的大脑模板
    create_alternative_brain_formats()
    
    # 4. 创建加载脚本
    create_surfice_loading_script()
    
    # 5. 创建全面指南
    create_comprehensive_guide()
    
    print("\n" + "=" * 60)
    print("✅ 诊断和修复完成!")
    print("")
    if not mz3_ok:
        print("🔧 MZ3文件有问题 - 已创建多种替代格式")
        print("📁 推荐使用: brain_fixed.ply")
    else:
        print("✅ MZ3文件正常 - 但仍创建了备用格式")
    
    print("")
    print("🎯 现在您有多种选择:")
    print("  • brain_fixed.ply (推荐)")
    print("  • brain.obj (通用)")
    print("  • brain.stl (3D标准)")
    print("  • 直接加载NIfTI数据")
    print("")
    print("📖 详细说明: MZ3_PROBLEM_SOLUTIONS.md")
    print("=" * 60)

if __name__ == "__main__":
    main()